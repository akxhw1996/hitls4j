/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_openhitls_crypto_core_CryptoNative */

#ifndef _Included_org_openhitls_crypto_core_CryptoNative
#define _Included_org_openhitls_crypto_core_CryptoNative
#ifdef __cplusplus
extern "C" {
#endif

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    messageDigestInit
 */
JNIEXPORT jlong JNICALL Java_org_openhitls_crypto_core_CryptoNative_messageDigestInit
  (JNIEnv *, jclass, jstring);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    messageDigestUpdate
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_messageDigestUpdate
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    messageDigestFinal
 */
JNIEXPORT jbyteArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_messageDigestFinal
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    messageDigestFree
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_messageDigestFree
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    hmacInit
 */
JNIEXPORT jlong JNICALL Java_org_openhitls_crypto_core_CryptoNative_hmacInit
  (JNIEnv *, jclass, jstring, jbyteArray);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    hmacUpdate
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_hmacUpdate
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    hmacFinal
 */
JNIEXPORT jbyteArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_hmacFinal
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    hmacReinit
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_hmacReinit
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    hmacGetMacLength
 */
JNIEXPORT jint JNICALL Java_org_openhitls_crypto_core_CryptoNative_hmacGetMacLength
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    hmacFree
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_hmacFree
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    ecdsaCreateContext
 */
JNIEXPORT jlong JNICALL Java_org_openhitls_crypto_core_CryptoNative_ecdsaCreateContext
  (JNIEnv *, jclass, jstring);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    ecdsaFreeContext
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_ecdsaFreeContext
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    ecdsaSetKeys
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_ecdsaSetKeys
  (JNIEnv *, jclass, jlong, jstring, jbyteArray, jbyteArray);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    ecdsaSetUserId
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_ecdsaSetUserId
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    ecdsaGenerateKeyPair
 */
JNIEXPORT jobjectArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_ecdsaGenerateKeyPair
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    ecdsaEncrypt
 */
JNIEXPORT jbyteArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_ecdsaEncrypt
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    ecdsaDecrypt
 */
JNIEXPORT jbyteArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_ecdsaDecrypt
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    ecdsaSign
 */
JNIEXPORT jbyteArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_ecdsaSign
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    ecdsaVerify
 */
JNIEXPORT jboolean JNICALL Java_org_openhitls_crypto_core_CryptoNative_ecdsaVerify
  (JNIEnv *, jclass, jlong, jbyteArray, jbyteArray, jint);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    symmetricCipherInit
 */
JNIEXPORT jlong JNICALL Java_org_openhitls_crypto_core_CryptoNative_symmetricCipherInit
  (JNIEnv *, jclass, jstring, jstring, jbyteArray, jbyteArray, jint);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    symmetricCipherSetPadding
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_symmetricCipherSetPadding
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    symmetricCipherUpdate
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_symmetricCipherUpdate
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint, jbyteArray, jint, jintArray);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    symmetricCipherFinal
 */
JNIEXPORT jbyteArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_symmetricCipherFinal
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    symmetricCipherFree
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_symmetricCipherFree
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    dsaCreateContext
 */
JNIEXPORT jlong JNICALL Java_org_openhitls_crypto_core_CryptoNative_dsaCreateContext
  (JNIEnv *, jclass);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    dsaFreeContext
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_dsaFreeContext
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    dsaSetParameters
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_dsaSetParameters
  (JNIEnv *, jclass, jlong, jbyteArray, jbyteArray, jbyteArray);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    dsaGenerateKeyPair
 */
JNIEXPORT jobjectArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_dsaGenerateKeyPair
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    dsaSign
 */
JNIEXPORT jbyteArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_dsaSign
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    dsaVerify
 */
JNIEXPORT jboolean JNICALL Java_org_openhitls_crypto_core_CryptoNative_dsaVerify
  (JNIEnv *, jclass, jlong, jbyteArray, jbyteArray, jint);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    rsaCreateContext
 */
JNIEXPORT jlong JNICALL Java_org_openhitls_crypto_core_CryptoNative_rsaCreateContext
  (JNIEnv *, jclass);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    rsaFreeContext
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_rsaFreeContext
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    rsaSetParameters
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_rsaSetParameters
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    rsaSetKeys
 */
JNIEXPORT void JNICALL Java_org_openhitls_crypto_core_CryptoNative_rsaSetKeys
  (JNIEnv *, jclass, jlong, jbyteArray, jbyteArray);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    rsaGenerateKeyPair
 */
JNIEXPORT jobjectArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_rsaGenerateKeyPair
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    rsaSign
 */
JNIEXPORT jbyteArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_rsaSign
  (JNIEnv *, jclass, jlong, jbyteArray, jstring);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    rsaVerify
 */
JNIEXPORT jboolean JNICALL Java_org_openhitls_crypto_core_CryptoNative_rsaVerify
  (JNIEnv *, jclass, jlong, jbyteArray, jbyteArray, jstring);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    rsaEncrypt
 */
JNIEXPORT jbyteArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_rsaEncrypt
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     org_openhitls_crypto_core_CryptoNative
 * Method:    rsaDecrypt
 */
JNIEXPORT jbyteArray JNICALL Java_org_openhitls_crypto_core_CryptoNative_rsaDecrypt
  (JNIEnv *, jclass, jlong, jbyteArray);

#ifdef __cplusplus
}
#endif
#endif 